require(httr)
require("httr")
install.package("httr")
install.packages("httr")
library(httr)
oauth_callback()
full_url <- oauth_callback()
full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\1")
print(full_url)
full_url <- oauth_callback()
full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\1")
print(full_url)
full_url <- oauth_callback()
require(httr)
require(rjson)
require(RCurl)
#Authentication
## getting callback URL
full_url <- oauth_callback()
full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
#message <- paste("Copy and paste into Site URL on Instagram App Settings:",
#                full_url, "\nWhen done, press any key to continue...")
invisible(readline(message))
app_name <- "ThinkToStartTest"
client_id <- "XXX"
client_secret <- "XXX"
scope = "basic"
instagram <- oauth_endpoint(
authorize = "https://api.instagram.com/oauth/authorize",
access = "https://api.instagram.com/oauth/access_token")
myapp <- oauth_app(app_name, client_id, client_secret)
#scope <- NULL
ig_oauth <- oauth2.0_token(instagram, myapp,scope="basic",  type = "application/x-www-form-urlencoded",cache=FALSE)
x=seq(-4,4,length=1000)
plot(x,dnorm(x),type="l",col="red")
lines(x,dt(x,2),type="l",xlab="",ylab="",lty=1)
lines(x,dt(x,5),type="l",xlab="",ylab="",lty=2)
lines(x,dt(x,8),type="l",xlab="",ylab="",lty=3)
lines(x,dt(x,12),type="l",xlab="",ylab="",lty=4)
??square root
?? root
?? sqrt
sqrt(4)
? e
?? e
?? natural
log()
log(1)
log(2)
(1 / (10 * sqrt(2*3.14))) *  exp(-(90-70)^2/2*100)
10 * sqrt(2*3.14)
(1 / (10 * sqrt(2*3.14)))
90-70)^2
-(90-70)^2
-(90-70)^2/2*100
-(90-70)^2/2*100
(-(90-70)^2)/2*100
(1 / (10 * sqrt(2*3.14))) *  exp(-(90-70)^2/(2*100))
(1 / (10 * sqrt(2*3.14))) *  exp(-(80-70)^2/(2*100))
(1 / (10 * sqrt(2*3.14))) *  exp(-(70-70)^2/(2*100))
1 - (1/(10 * sqrt(2*3.14))) *  exp(-(90-70)^2/(2*100))
1 - (1/(10 * sqrt(2*3.14))) *  exp(-(99-70)^2/(2*100))
sqrt(2*3.14)
1 - (1/(10 * sqrt(2*3.14))) *  exp(-(50-70)^2/(2*100))
??distribution
dataset <- 0:100
data <- pnorm(dataset, mean = 75, sd = 10)
data
a <- data.frame(dataset, data)
a
View(a)
write.table(a, "normaldis.txt")
plot(a)
plot(rnorm(100000, mean = 0 , sd = 1))
hist(rnorm(100000, mean = 0 , sd = 1))
hist(rnorm(100000, mean = 0 , sd = 10))
hist(rnorm(100000, mean = 50 , sd = 10))
?as.
??as.
quit()
a <- read.csv(file.choose())
str(a)
colnames(a)
a[,1]
sqrt(1783)
42.22558^2
1783/3
1783/13
1783/7
for i in 1:1783{}
?remainder
??remainder
3%%2
3%/%2
a <- vector()
for i in 1:1783{
if 1783%%i == 1783/i
a <- cbind(a, i)
}
a <- vector()
for i in 1:1783{
if 1783 %% i == 1783/i
a <- cbind(a, i)
}
a <- vector()
for (i in 1:1783){
if 1783 %% i == 1783/i
a <- cbind(a, i)
}
a <- vector()
for (i in 1:1783){
if 1783%%i == 1783/i
a <- cbind(a, i)
}
??if
?
?if
a <- vector()
for (i in 1:1783){
if (1783%%i == 1783/i){
a <- cbind(a, i)
}
}
n <- 1784
a <- vector()
for (i in 1:n){
if (n%%i == n/i){
a <- cbind(a, i)
}
}
3%%2
n <- 1783
a <- vector()
for (i in 1:n){
if (n%%i == 0){
a <- cbind(a, i)
}
}
n <- 19812319742198
a <- vector()
for (i in 1:n){
if (n%%i == 0){
a <- cbind(a, i)
}
}
n <- 198123
a <- vector()
for (i in 1:n){
if (n%%i == 0){
a <- cbind(a, i)
}
}
n <- 765
a <- vector()
for (i in 1:n){
if (n%%i == 0){
a <- cbind(a, i)
}
}
n <- 1732
a <- vector()
for (i in 1:n){
if (n%%i == 0){
a <- cbind(a, i)
}
}
?substring
ingredient <- read.csv(file.choose())
ingredient <- read.csv(file.choose())
ingredient <- strsplit(ingredient, ",")
ingredient <- strsplit(as.charactor(ingredient), ",")
ingredient <- strsplit(as.character(ingredient), ",")
ingredient
ingredient <- read.csv(file.choose())
head(ingredient)
ingredient <- ingredient["配料"]
ingredient
ingredient <- as.character(ingredient)
ingredient
ingredient <- read.csv(file.choose())
View(ingredient)
Sys.setlocale(locale="C")
ingredient <- as.character(ingredient)
ingredient <- read.csv(file.choose())
ingredient <- ingredient[,2]
ingredient <- read.csv(file.choose())
View(ingredient)
ingredient <- read.csv(file.choose())
ingredient[,2]
list(ingredient[,2])
unlist(ingredient[,2])
ingredient <- unlist(ingredient[,2])
head(ingredient)
ingredient
as.charactor(ingredient)
as.character(ingredient)
ingredient <- as.character(ingredient)
ingredient
ing <- strsplit(ingredient, ",")
ing <- unlist(ing)
ing <- unique(ing)
write.csv(ing, "ingredient.csv")
ingredient <- read.csv(file.choose())
ingredient <- unlist(ingredient[,2])
ingredient <- unlist(ingredient)
ingredient <- as.character(ingredient)
ing <- strsplit(ingredient, ",")
ing <- unlist(ing)
ing <- unique(ing)
write.csv(ing, "ingredient.csv")
quit
quit()
dataset <- read.csv(file.choose())
colnames(dataset)
nrow(dataset)
str(datset)
str(dataset)
dataset[1]
View(dataset)
dataset[,1]
dataset[1,]
summary(dataset)
train <- read.csv(file.choose())
?ggplot2
??ggplot
quit()
ctree <- function(N){
filler = "*"
blank = ""
for (i in 1:N){
row = c(sample(blank,N-i,replace=T),sample(filler,i,replace=T),sample(blank,N-i,replace=T))
cat(row,"\n")
}
cat(c(sample(blank,(N-1),replace=T),sample(filler,1,replace=T),sample(blank,(N-1),replace=T)),"\n")
} #ctree
ctree
print ctree
print(ctree)
pyramid.plot <- function(x,
g,
main = paste("Pyramid plot of",
deparse(substitute(x)), "by",
deparse(substitute(g))),
xlab = paste(deparse(substitute(g)), "(",
levels(g)[1], "/",
levels(g)[2],")"),
ylab = deparse(substitute(x))
)
{
tab <- table(x, g)
tab[ ,1] <- -tab[ ,1]
barplot(tab,
horiz = TRUE,
beside = TRUE,
space = c(0, -nrow(tab)),
names.arg = c(dimnames(tab)$x, dimnames(tab)$x),
xlim = c(min(tab) * 1.1, max(tab) * 1.1),
col = "white",
main = main,
xlab = xlab,
ylab = ylab
)
}
pyramid.plot
pyramid.plot(10, 10)
quit()
library("swirl")
install.packages("swirl")
library("swirl")
swirl()
quit()
dbinom(0.5, 10, 7)
dbinom(prob = 0.5, size = 10, x = y)
dbinom(prob = 0.5, size = 10, x = 7)
x = binom(prob = 0.5, size = 1000000)
quit()
library('RCurl')
library('rjson')
json <- getURL('https://www.kimonolabs.com/api/47vb2bpy?apikey=RYkDGnKa2CZIlsGtkV8o5UPG4n2rrgGu')
obj <- fromJSON(json)
print(obj)
json <- getURL('https://www.kimonolabs.com/api/47vb2bpy?apikey=RYkDGnKa2CZIlsGtkV8o5UPG4n2rrgGu')
library('RCurl')
library('rjson')
json <- getURL('https://www.kimonolabs.com/api/47vb2bpy?apikey=RYkDGnKa2CZIlsGtkV8o5UPG4n2rrgGu')
?getUrl
?getURL
?cat
?rnorm
data <- rnorm(1000000, mean = 0, sd = 1)
hist(data)
rm(list=ls(all=TRUE))
index <- 2:8
data <- 10^index
n <- 10^index
data <- rnomr(n, mean = 0, sd = 1)
data <- rnorm(n, mean = 0, sd = 1)
for i in n{
paste0(data, i) <- rnorm(n, mean = 0, sd = 1)
}
for i in n {
for (i in n) {
paste0(data, i) <- rnorm(n, mean = 0, sd = 1)
}
for (i in n) {
data <- rnorm(n, mean = 0, sd = 1)
}
data[1] <- rnorm(n[1], mean = 0, sd = 1)
n
n[1]
data
data1 <- rnorm(n[1], mean = 0, sd = 1)
rm(data)
data2 <- rnorm(n[2], mean = 0, sd = 1)
data1 <- rnorm(n[1], mean = 0, sd = 1)
data2 <- rnorm(n[2], mean = 0, sd = 1)
data3 <- rnorm(n[3], mean = 0, sd = 1)
data4 <- rnorm(n[4], mean = 0, sd = 1)
data5 <- rnorm(n[5], mean = 0, sd = 1)
data6 <- rnorm(n[6], mean = 0, sd = 1)
data7 <- rnorm(n[7], mean = 0, sd = 1)
data8 <- rnorm(n[8], mean = 0, sd = 1)
?par
par(mfrow = c(3,2))
plot(data2)
plot(data3)
par(mfrow = c(1,1))
plot(data2)
par(mfrow = c(3,2))
hist(data2)
par(mfrow = c(1,1))
hist(data2, data3, data4, data5, data6, data7)
quit()
hist(data1)
index <- 2:8
n <- 10^index
data2 <- rnorm(n[2], mean = 0, sd = 1)
data3 <- rnorm(n[3], mean = 0, sd = 1)
data4 <- rnorm(n[4], mean = 0, sd = 1)
data5 <- rnorm(n[5], mean = 0, sd = 1)
data6 <- rnorm(n[6], mean = 0, sd = 1)
data7 <- rnorm(n[7], mean = 0, sd = 1)
hist(data2)
hist(data3)
hist(data4)
hist(data5)
hist(data6)
hist(data7)
quit()
data1 <- read.csv(file.choose())
data2 <- read.csv(file.choose())
?merge
data3 <- merge(data1, data2, "Barcode")
View(data3)
quit()
10730.97 - 7206.72
65.51* 6.3
28000 - 23191.47
574*12
574*8
setwd("./Team-Similarity-Analysis")
euro <- read.csv("euro.csv")
View(euro)
?read.csv
euro <- subset(euro, na.rm=TRUE)
View(euro)
euro <- subset(euro, euro[,1]!=NA)
euro <- read.csv("euro.csv")
euro <- subset(euro, euro[,2]!=NA)
euro <- read.csv("euro.csv")
euro[,2]
euro
euro <- subset(euro, goal!=NA)
euro[,2]!=NA
?subset
?na.rm
euro <- read.csv("euro.csv")
euro <- subset(euro, na.rm=TRUE)
euro[,2]!=NA
View(euro)
euro[,1]
euro[,2]
euro[,2]==NA
euro <- subset(euro, goal!="NA")
?aggregate
euro1 <- aggregate(euro, by = "team", mean)
euro1 <- aggregate(euro, by = team, mean)
euro1 <- aggregate(euro, mean)
euro1 <- aggregate(euro, euro$goal, mean)
euro$goal
euro1 <- aggregate(euro, euro$team, mean)
euro$team
euro1 <- aggregate(euro, list(euro$team), mean)
euro1
euro1 <- aggregate(euro, list(euro$team), mean)[,-2]
euro1
mean_data <- mean(euro1)
mean_data
rownames(euro) <- euro[,1]
euro <- read.csv("euro.csv")
euro <- subset(euro, goal!="NA")
rownames(euro) <- euro[,1]
euro.csv
euro <- read.csv("euro.csv")
euro <- subset(euro, goal!="NA")
euro1 <- aggregate(euro[,-1], list(euro$team), mean)
euro1
mean_data <- mean(euro1)
View(euro1)
mean_data <- mean(euro1[,-1])
euro1[,-1]
mean(euro1[,-1])
mean_data <- mean(as.numeric(euro1[,-1]))
euro1[,-1]
mean_data <- rowMeans(euro1[,-1])
euro2 <- euro[,-1]/mean_data
euro2 <- euro1[,-1]/mean_data
mean_data
View(euro1)
View(euro2)
mean_data <- colMeans(euro1[,-1])
euro2 <- euro1[,-1]/mean_data
View(euro2)
View(euro1)
mean_data
mean(euro1$goal_for)
euro2 <- euro1[,-1]/mean_data
View(euro2)
euro1[,-1]
euro1[1,-1]/mean_data
euro1[,-1]/mean_data
mean_data
?sapply
euro2 <- sapply(euro1[,-1], "/mean_data")
?matrix
mean_data <- matrix(colMeans(euro1[,-1]), byrow= TRUE)
euro2 <- euro1[,-1]/mean_data
euro2
mean_data <- matrix(colMeans(euro1[,-1]))
euro2 <- euro1[,-1]/mean_data
euro2
View(mean_data)
mean_data <- matrix(colMeans(euro1[,-1]), byrow=TRUE)
View(mean_data)
mean_data <- data.frame(matrix(colMeans(euro1[,-1]), byrow=TRUE))
View(mean_data)
mean_data <- data.frame(matrix(colMeans(euro1[,-1])))
View(mean_data)
mean_data <- c("mean_data", colMeans(euro1[,-1])
euro2 <- rbind(euro1, mean_data)
mean_data <- c("mean_data", colMeans(euro1[,-1]))
euro2 <- rbind(euro1, mean_data)
View(euro2)
View(euro2)
mean_data <- c("mean", colMeans(euro1[,-1]))
euro2 <- rbind(euro1, mean_data)
mean_data
colname(mean_data)[1] <- team
colname(mean_data)[1] <- "team"
colnames(mean_data)[1] <- "team"
mean_data <- c("mean", colMeans(euro1[,-1]))
colnames(mean_data)[1] <- "team"
mean_data <- data.frame(c("mean", colMeans(euro1[,-1])))
colnames(mean_data)[1] <- "team"
euro2 <- rbind(euro1, mean_data)
View(mean_data)
?t
euro2 <- rbind(euro1, t(mean_data))
t(mean_data)
mean_data <- data.frame(c("mean", colMeans(euro1[,-1])))
mean_data <- t(data.frame(c("mean", colMeans(euro1[,-1]))))
colnames(mean_data)[1] <- "team"
euro2 <- rbind(euro1, t(mean_data))
View(mean_data)
euro2 <- rbind(euro1, mean_data[,-1])
euro2 <- rbind(euro1, mean_data)
View(mean_data)
euro2 <- rbind(euro1, mean_data)
row.names(mean_data) <- NULL
euro2 <- rbind(euro1, mean_data)
mean_data <- t(data.frame(colMeans(euro1[,-1])))
mean_data
row.name(mean_data)
rnames(mean_data)
rownames(mean_data)
rownames(mean_data) <- "NULL"
mean_data
euro2 <- euro1/mean_data
euro2 <- euro1[,-1]/mean_data
View(euro2)
for (i in 1:nrow(euro1)){
euro1[i] = euro1[i]/mean_data
}
for (i in 1:nrow(euro1)){
euro1[i,-1] = euro1[i,-1]/mean_data
}
euro1 <- aggregate(euro[,-1], list(euro$team), mean)
euro1 <- aggregate(euro[,-1], list(euro$team), mean)
mean_data <- colMeans(euro1[,-1])
for (i in 1:nrow(euro1)){
euro1[i,-1] = euro1[i,-1]/mean_data
}
eruo1
euro1
?kmean
?kmeans
cluster <- kmeans(euro1, "Lloyd")
cluster <- kmeans(euro1)
cluster <- kmeans(euro1, number = 1)
cluster <- kmeans(euro1, center = 1)
View(euro1)
cluster <- kmeans(euro1, 2)
