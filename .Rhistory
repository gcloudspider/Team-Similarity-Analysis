a <- vector()
for (i in 1:n){
if (n%%i == 0){
a <- cbind(a, i)
}
}
?substring
ingredient <- read.csv(file.choose())
ingredient <- read.csv(file.choose())
ingredient <- strsplit(ingredient, ",")
ingredient <- strsplit(as.charactor(ingredient), ",")
ingredient <- strsplit(as.character(ingredient), ",")
ingredient
ingredient <- read.csv(file.choose())
head(ingredient)
ingredient <- ingredient["配料"]
ingredient
ingredient <- as.character(ingredient)
ingredient
ingredient <- read.csv(file.choose())
View(ingredient)
Sys.setlocale(locale="C")
ingredient <- as.character(ingredient)
ingredient <- read.csv(file.choose())
ingredient <- ingredient[,2]
ingredient <- read.csv(file.choose())
View(ingredient)
ingredient <- read.csv(file.choose())
ingredient[,2]
list(ingredient[,2])
unlist(ingredient[,2])
ingredient <- unlist(ingredient[,2])
head(ingredient)
ingredient
as.charactor(ingredient)
as.character(ingredient)
ingredient <- as.character(ingredient)
ingredient
ing <- strsplit(ingredient, ",")
ing <- unlist(ing)
ing <- unique(ing)
write.csv(ing, "ingredient.csv")
ingredient <- read.csv(file.choose())
ingredient <- unlist(ingredient[,2])
ingredient <- unlist(ingredient)
ingredient <- as.character(ingredient)
ing <- strsplit(ingredient, ",")
ing <- unlist(ing)
ing <- unique(ing)
write.csv(ing, "ingredient.csv")
quit
quit()
dataset <- read.csv(file.choose())
colnames(dataset)
nrow(dataset)
str(datset)
str(dataset)
dataset[1]
View(dataset)
dataset[,1]
dataset[1,]
summary(dataset)
train <- read.csv(file.choose())
?ggplot2
??ggplot
quit()
ctree <- function(N){
filler = "*"
blank = ""
for (i in 1:N){
row = c(sample(blank,N-i,replace=T),sample(filler,i,replace=T),sample(blank,N-i,replace=T))
cat(row,"\n")
}
cat(c(sample(blank,(N-1),replace=T),sample(filler,1,replace=T),sample(blank,(N-1),replace=T)),"\n")
} #ctree
ctree
print ctree
print(ctree)
pyramid.plot <- function(x,
g,
main = paste("Pyramid plot of",
deparse(substitute(x)), "by",
deparse(substitute(g))),
xlab = paste(deparse(substitute(g)), "(",
levels(g)[1], "/",
levels(g)[2],")"),
ylab = deparse(substitute(x))
)
{
tab <- table(x, g)
tab[ ,1] <- -tab[ ,1]
barplot(tab,
horiz = TRUE,
beside = TRUE,
space = c(0, -nrow(tab)),
names.arg = c(dimnames(tab)$x, dimnames(tab)$x),
xlim = c(min(tab) * 1.1, max(tab) * 1.1),
col = "white",
main = main,
xlab = xlab,
ylab = ylab
)
}
pyramid.plot
pyramid.plot(10, 10)
quit()
library("swirl")
install.packages("swirl")
library("swirl")
swirl()
quit()
dbinom(0.5, 10, 7)
dbinom(prob = 0.5, size = 10, x = y)
dbinom(prob = 0.5, size = 10, x = 7)
x = binom(prob = 0.5, size = 1000000)
quit()
library('RCurl')
library('rjson')
json <- getURL('https://www.kimonolabs.com/api/47vb2bpy?apikey=RYkDGnKa2CZIlsGtkV8o5UPG4n2rrgGu')
obj <- fromJSON(json)
print(obj)
json <- getURL('https://www.kimonolabs.com/api/47vb2bpy?apikey=RYkDGnKa2CZIlsGtkV8o5UPG4n2rrgGu')
library('RCurl')
library('rjson')
json <- getURL('https://www.kimonolabs.com/api/47vb2bpy?apikey=RYkDGnKa2CZIlsGtkV8o5UPG4n2rrgGu')
?getUrl
?getURL
?cat
?rnorm
data <- rnorm(1000000, mean = 0, sd = 1)
hist(data)
rm(list=ls(all=TRUE))
index <- 2:8
data <- 10^index
n <- 10^index
data <- rnomr(n, mean = 0, sd = 1)
data <- rnorm(n, mean = 0, sd = 1)
for i in n{
paste0(data, i) <- rnorm(n, mean = 0, sd = 1)
}
for i in n {
for (i in n) {
paste0(data, i) <- rnorm(n, mean = 0, sd = 1)
}
for (i in n) {
data <- rnorm(n, mean = 0, sd = 1)
}
data[1] <- rnorm(n[1], mean = 0, sd = 1)
n
n[1]
data
data1 <- rnorm(n[1], mean = 0, sd = 1)
rm(data)
data2 <- rnorm(n[2], mean = 0, sd = 1)
data1 <- rnorm(n[1], mean = 0, sd = 1)
data2 <- rnorm(n[2], mean = 0, sd = 1)
data3 <- rnorm(n[3], mean = 0, sd = 1)
data4 <- rnorm(n[4], mean = 0, sd = 1)
data5 <- rnorm(n[5], mean = 0, sd = 1)
data6 <- rnorm(n[6], mean = 0, sd = 1)
data7 <- rnorm(n[7], mean = 0, sd = 1)
data8 <- rnorm(n[8], mean = 0, sd = 1)
?par
par(mfrow = c(3,2))
plot(data2)
plot(data3)
par(mfrow = c(1,1))
plot(data2)
par(mfrow = c(3,2))
hist(data2)
par(mfrow = c(1,1))
hist(data2, data3, data4, data5, data6, data7)
quit()
hist(data1)
index <- 2:8
n <- 10^index
data2 <- rnorm(n[2], mean = 0, sd = 1)
data3 <- rnorm(n[3], mean = 0, sd = 1)
data4 <- rnorm(n[4], mean = 0, sd = 1)
data5 <- rnorm(n[5], mean = 0, sd = 1)
data6 <- rnorm(n[6], mean = 0, sd = 1)
data7 <- rnorm(n[7], mean = 0, sd = 1)
hist(data2)
hist(data3)
hist(data4)
hist(data5)
hist(data6)
hist(data7)
quit()
data1 <- read.csv(file.choose())
data2 <- read.csv(file.choose())
?merge
data3 <- merge(data1, data2, "Barcode")
View(data3)
quit()
10730.97 - 7206.72
65.51* 6.3
28000 - 23191.47
574*12
574*8
euro <- read.csv("euro.csv")
read.csv(file.choose())
euro <- subset(euro, goal!="NA")
euro <- read.csv("euro.csv")
euro <- read.csv(file.choose())
euro <- subset(euro, goal!="NA")
euro1 <- aggregate(euro[,-1], list(euro$team), mean)
mean_data <- colMeans(euro1[,-1])
for (i in 1:nrow(euro1)){
euro1[i,-1] = euro1[i,-1]/mean_data
}
cluster <- kmeans(euro1, 2)
cluster <- kmeans(euro1[,-1], 2)
cluster
rownames(euro1) <- euro[,1]
?rownames
plot(euro1, col = cluster$cluster)
points(cluster$centers, col = 1:2, pch = 8, cex=2)
?kmeans
cluster <- kmeans(scare(euro1[,-1]), algorithm = "Lloyd")
cluster <- kmeans(scale(euro1[,-1]), algorithm = "Lloyd")
cluster <- kmeans(scale(euro1[,-1]), algorithm = "Lloyd")
cluster <- kmeans(scale(euro1[,-1]), 3)
plot(euro1, col = cluster$cluster)
points(cluster$centers, col = 1:2, pch = 8, cex=2)
$
plot(euro1[,-1], col = cluster$cluster)
points(cluster$centers, col = 1:2, pch = 8, cex=2)
plot(scale(euro[,-1]),col=cluster$cluster);points(cluster$centers,col=1:5,pch=8,cex=5)
?scale
plot(euro[,-1], col=cluster$cluster)
points(cluster$centers,col=1:5,pch=8,cex=5)
View(euro1)
cluster <- kmeans((euro1[,-1]), 4, 1)
cluster <- kmeans((euro1[,-1]), 4)
plot(euro1[,-1], col = cluster$cluster)
points(cluster$centers, col = 1:2, pch = 10, cex=2)
rownames(euro1) <- euro[,1]
euro1 <- aggregate(euro[,-1], list(euro$team), mean)
mean_data <- colMeans(euro1[,-1])
for (i in 1:nrow(euro1)){
euro1[i,-1] = euro1[i,-1]/mean_data
}
rownames(euro1) <- list(euro[,1])
rownames(euro1) <- unique(euro[,1])
euro1 <- euro1[,-1]
mean_data <- colMeans(euro1)
for (i in 1:nrow(euro1)){
euro1[i,-1] = euro1[i,-1]/mean_data
}
View(euro1)
cluster <- kmeans((euro1[,-1]), 4)
cluster
clusplot(euro1, cluster$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
libary(cluster)
svd(euro1)
svd <- svd(euro1)
plot(svd)
plost(svd$d)
plot(svd$d)
?svd
diag(svd$d)
euro <- read.csv("euro.csv")
setwd("./Team-Similarity-Analysis")
euro <- read.csv("euro.csv")
euro <- subset(euro, goal!="NA")
euro1 <- aggregate(euro[,-1], list(euro$team), mean)
rownames(euro1) <- euro1[,1]
euro1 <- euro1[,-1]
View(euro1)
mean_data <- colMeans(euro1[,-1])
mean_data <- colMeans(euro1)
for (i in 1:nrow(euro1)){
euro1[i,-1] = euro1[i,-1]/mean_data
}
cost_df <- data.frame()
#run kmeans for all clusters up to 100
for(i in 2:8){
#Run kmeans for each level of i, allowing up to 100 iterations for convergence
kmeans<- kmeans(x=euro, centers=i)
#Combine cluster number and cost together, write to df
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
names(cost_df) <- c("cluster", "cost")
cost_df <- data.frame()
#run kmeans for all clusters up to 100
for(i in 2:8){
#Run kmeans for each level of i, allowing up to 100 iterations for convergence
kmeans<- kmeans(x=euro, centers=i)
#Combine cluster number and cost together, write to df
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
names(cost_df) <- c("cluster", "cost")
cost_df <- data.frame()
for(i in 2:8){
#Run kmeans for each level of i, allowing up to 100 iterations for convergence
kmeans<- kmeans(x=euro, centers=i)
#Combine cluster number and cost together, write to df
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
for(i in 2:8){
#Run kmeans for each level of i, allowing up to 100 iterations for convergence
kmeans<- kmeans(x=euro1, centers=i)
#Combine cluster number and cost together, write to df
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
for(i in 1:8){
#Run kmeans for each level of i, allowing up to 100 iterations for convergence
kmeans<- kmeans(x=euro1, centers=i)
#Combine cluster number and cost together, write to df
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
kmeans<- kmeans(x=euro1, centers=i)
kmeans<- kmeans(x=euro1, centers=i, iter.max=100)
nrow(euro1)
for(i in 1:8){
#Run kmeans for each level of i, allowing up to 100 iterations for convergence
kmeans<- kmeans(x=euro1, centers=i, iter.max=100)
#Combine cluster number and cost together, write to df
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
for(i in 1:8){
#Run kmeans for each level of i, allowing up to 100 iterations for convergence
kmeans<- kmeans(x=euro1, centers=i, iter.max=100)
#Combine cluster number and cost together, write to df
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
kmeans<- kmeans(euro1, centers=i, iter.max=100)
kmeans<- kmeans(euro1, centers=1, iter.max=100)
kmeans <- kmeans(euro1, centers=2, iter.max=100)
libary(ggplot2)
library(ggplot2)
for(i in 1:8){
kmeans<- kmeans(euro1, centers = i, iter.max = 100)
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
names(cost_df) <- c("cluster", "cost")
i
for(i in 1:nrow(euro1)){
kmeans<- kmeans(euro1, centers = i, iter.max = 100)
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
names(cost_df) <- c("cluster", "cost")
for(i in 1:nrow(euro1)){
kmeans<- kmeans(euro1, centers = i, iter.max = 100)
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
cost_df <- data.frame()
for(i in 1:nrow(euro1)){
kmeans<- kmeans(euro1, centers = i, iter.max = 100)
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
kmeans<- kmeans(euro1, centers = i, iter.max = 100)
i
kmeans<- kmeans(euro1, centers = i-1, iter.max = 100)
for(i in 1:nrow(euro1)-1){
kmeans<- kmeans(euro1, centers = i, iter.max = 100)
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
for(i in 1:(nrow(euro1)-1)){
kmeans<- kmeans(euro1, centers = i, iter.max = 100)
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
names(cost_df) <- c("cluster", "cost")
ggplot(data=cost_df, aes(x=cluster, y=cost, group=1)) +
theme_bw(base_family="Garamond") +
geom_line(colour = "darkgreen") +
theme(text = element_text(size=20)) +
ggtitle("Reduction In Cost For Values of 'k'\n") +
xlab("\nClusters") +
ylab("Within-Cluster Sum of Squares\n") +
scale_x_continuous(breaks=seq(from=0, to=100, by= 10)) +
geom_line(aes(y= fitted), linetype=2)
ggplot(data=cost_df, aes(x=cluster, y=cost, group=1))
ggplot(data=cost_df, aes(x=cluster, y=cost, group=1)) +
theme_bw(base_family="Garamond") +
geom_line(colour = "darkgreen") +
theme(text = element_text(size=20)) +
ggtitle("Reduction In Cost For Values of 'k'\n") +
xlab("\nClusters") +
ylab("Within-Cluster Sum of Squares\n") +
scale_x_continuous(breaks=seq(from=0, to=100, by= 10)) +
geom_line(aes(y= fitted), linetype=2)
ggplot(data=cost_df, aes(x=cluster, y=cost, group=1)) +
theme_bw(base_family="Garamond") +
geom_line(colour = "darkgreen") +
theme(text = element_text(size=20)) +
ggtitle("Reduction In Cost For Values of 'k'\n") +
xlab("\nClusters") +
ylab("Within-Cluster Sum of Squares\n") +
scale_x_continuous(breaks=seq(from=0, to=100, by= 10))
lm(cost_df$cost ~ cost_df$cluster)
cost_df$fitted <- (19019.9 - 550.9*cost_df$cluster),
cost_df$fitted <- (19019.9 - 550.9*cost_df$cluster)
ggplot(data=cost_df, aes(x=cluster, y=cost, group=1)) +
theme_bw(base_family="Garamond") +
geom_line(colour = "darkgreen") +
theme(text = element_text(size=20)) +
ggtitle("Reduction In Cost For Values of 'k'\n") +
xlab("\nClusters") +
ylab("Within-Cluster Sum of Squares\n") +
scale_x_continuous(breaks=seq(from=0, to=100, by= 10)) +
geom_line(aes(y= fitted), linetype=2)
ggplot(data=cost_df, aes(x=cluster, y=cost, group=1)) +
theme_bw(base_family="Garamond") +
geom_line(colour = "darkgreen") +
theme(text = element_text(size=20)) +
ggtitle("Reduction In Cost For Values of 'k'\n") +
xlab("\nClusters") +
ylab("Within-Cluster Sum of Squares\n") +
scale_x_continuous(breaks=seq(from=0, to=100, by= 10))
ggplot(data=cost_df, aes(x=cluster, y=cost, group=1)) +
theme_bw(base_family="Garamond") +
geom_line(colour = "darkgreen") +
theme(text = element_text(size=20)) +
ggtitle("Reduction In Cost For Values of 'k'\n") +
xlab("\nClusters") +
ylab("Within-Cluster Sum of Squares\n") +
scale_x_continuous(breaks=seq(from=0, to=100, by= 10)) +
geom_line(aes(y= fitted), linetype=2)
warnings()
ggplot(data=cost_df, aes(x=cluster, y=cost, group=1)) +
theme_bw(base_family="Garamond") +
geom_line(colour = "darkgreen") +
theme(text = element_text(size=20)) +
ggtitle("Reduction In Cost For Values of 'k'\n") +
xlab("\nClusters") +
ylab("Within-Cluster Sum of Squares\n") +
scale_x_continuous(breaks=seq(from=0, to=100, by= 10))
??comment
for(i in 1:(nrow(euro1)-1)){
kmeans<- kmeans(euro1, centers = i)
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
names(cost_df) <- c("cluster", "cost")
cost_df <- data.frame()
for(i in 1:(nrow(euro1)-1)){
kmeans<- kmeans(euro1, centers = i)
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
names(cost_df) <- c("cluster", "cost")
lapply(kmeans, function(x) x$withinss)
lapply(kmeans, function(x) x$withinss)
res.within.ss <- sapply(kmeans, function(x) sum(x$withinss))
res.within.ss <- sapply(kmeans, function(x) sum(x$withinss))
res.within.ss <- sapply(kmeans, sum(kmeans$withinss))
res.within.ss <- sapply(kmeans$withinss, sum)
res.within.ss
library(cluster)
cluster <- kmeans(euro1, 4)
clusplot(euro1, cluster$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
clusplot(euro1, max(cluster$cluster, 2), color=TRUE, shade=TRUE,
labels=2, lines=0)
cluster$cluster
library(fpc)
install.packages("fpc")
library(fpc)
plotcluster(euro1, fitcluster$cluster)
plotcluster(euro1, cluster$cluster)
clusplot(euro1, cluster$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
clusplot(euro1, cluster$cluster, color=TRUE, shade=TRUE)
clusplot(euro1, cluster$cluster, shade=TRUE)
clusplot(euro1, cluster$cluster)
cost_df <- data.frame()
for(i in 1:(nrow(euro1)-1)){
kmeans<- kmeans(euro1, centers = i)
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
names(cost_df) <- c("cluster", "cost")
lm(cost_df$cost ~ cost_df$cluster)
ggplot(data=cost_df, aes(x=cluster, y=cost, group=1)) +
theme_bw(base_family="Garamond") +
geom_line(colour = "darkgreen") +
theme(text = element_text(size=20)) +
ggtitle("Reduction In Cost For Values of 'k'\n") +
xlab("\nClusters") +
ylab("Within-Cluster Sum of Squares\n") +
scale_x_continuous(breaks=seq(from=0, to=100, by= 10))
ggplot(data=cost_df, aes(x=cluster, y=cost, group=1)) +
theme_bw(base_family="Garamond") +
geom_line(colour = "darkgreen") +
theme(text = element_text(size=20)) +
ggtitle("Reduction In Cost For Values of 'k'\n") +
xlab("\nClusters") +
ylab("Within-Cluster Sum of Squares\n")
warinings()
warnings()
ggplot(data=cost_df, aes(x=cluster, y=cost, group=1)) +
theme_bw(base_family="Garamond") +
geom_line(colour = "darkgreen") +
ggtitle("Reduction In Cost For Values of 'k'\n") +
xlab("\nClusters") +
ylab("Within-Cluster Sum of Squares\n")
warnings()
？theme_bw
??theme_bw
ggplot(data=cost_df, aes(x=cluster, y=cost, group=1)) +
theme_gray() +
geom_line(colour = "darkgreen") +
ggtitle("Reduction In Cost For Values of 'k'\n") +
xlab("\nClusters") +
ylab("Within-Cluster Sum of Squares\n")
geom_line(aes(y= fitted), linetype=2)
cluster <- kmeans(euro1, 4)
cluster
cluster <- kmeans(euro1, 3)
cluster
with(euro1, pairs(euro1, col=c(1:3)[cluster$cluster]))
plot(euro1, col = cluster$cluster)
